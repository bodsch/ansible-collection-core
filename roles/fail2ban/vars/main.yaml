---

fail2ban_defaults_conf:
  default:
    # 'CRITICAL','ERROR','WARNING','NOTICE','INFO','DEBUG'
    loglevel: INFO
    # Set the log target. This could be a file, SYSLOG, STDERR or STDOUT.
    logtarget: "/var/log/fail2ban.log"
    # Set the syslog socket file. Only used when logtarget is SYSLOG
    syslogsocket: auto
    # Set the socket file. This is used to communicate with the daemon.
    socket: /run/fail2ban/fail2ban.sock
    # Set the PID file. This is used to store the process ID of the fail2ban server.
    pidfile: /run/fail2ban/fail2ban.pid
    # Set the file for the fail2ban persistent data to be stored.
    dbfile: /var/lib/fail2ban/fail2ban.sqlite3
    # Sets age at which bans should be purged from the database
    dbpurgeage: 86400
    # Number of matches stored in database per ticket
    dbmaxmatches: 10
  definition: {}
  thread:
    stacksize: 0

fail2ban_defaults_jail:
  includes:
    before: "{{ fail2ban_before_conf }}"
    after: ''
  default:
    ignoreips: "{{ fail2ban_ignoreips }}"
    # "bantime" is the number of seconds that a host is banned.
    bantime: 600
    # "maxretry" is the number of failures before a host get banned.
    maxretry: 3
    # A host is banned if it has generated "maxretry" during the last "findtime" seconds.
    findtime: 3200
    # pyinotify: requires pyinotify (a file alteration monitor) to be installed.
    #              If pyinotify is not installed, Fail2ban will use auto.
    # gamin:     requires Gamin (a file alteration monitor) to be installed.
    #              If Gamin is not installed, Fail2ban will use auto.
    # polling:   uses a polling algorithm which does not require external libraries.
    # systemd:   uses systemd python library to access the systemd journal.
    #              Specifying "logpath" is not valid for this backend.
    #              See "journalmatch" in the jails associated filter config
    # auto:      will try to use the following backends, in order:
    #              pyinotify, gamin, polling.
    backend: auto

    # yes:   if a hostname is encountered, a reverse DNS lookup will be performed.
    # warn:  if a hostname is encountered, a reverse DNS lookup will be performed,
    #        but it will be logged as a warning.
    # no:    if a hostname is encountered, will not be used for banning,
    #        but it will be logged as info.
    usedns: warn

    # "logencoding" specifies the encoding of the log files handled by the jail
    #   This is used to decode the lines from the log file.
    #   Typical examples:  "ascii", "utf-8"
    #
    #   auto:   will use the system locale setting
    logencoding: auto

    # "enabled" enables the jails.
    #  By default all jails are disabled, and it should stay this way.
    #  Enable only relevant to your setup jails in your .local or jail.d/*.conf
    #
    # true:  jail will be enabled and log files will get monitored for changes
    # false: jail is not enabled
    jails_enabled: false
  actions:
    destemail: root@localhost
    sender: root@localhost
    mta: sendmail
    protocol: tcp
    chain: INPUT
    # Default banning action (e.g. iptables, iptables-new, iptables-multiport, shorewall, etc)
    banaction: iptables-multiport

fail2ban_defaults_jails:
  - name: ssh
    enabled: false
    port: ssh
    filter: sshd
    logpath: '%(auth_log)s'
  - name: ssh-unknown-user
    enabled: false
    mode: ddos
    filter: sshd
    logpath: '%(auth_log)s'
  - name: ssh-breakin
    enabled: false
    port: ssh
    filter: sshd-break-in
    logpath: '%(auth_log)s'
  - name: ssh-ddos
    enabled: false
    port: ssh
    filter: sshd-ddos
    logpath: '%(auth_log)s'

fail2ban_defaults_actions: []

fail2ban_defaults_filters:
  - name: sshd-break-in
    author: bodsch
    definition:
      failregex:
        - 'sshd\[\S*\]: Address <HOST> (.*) POSSIBLE BREAK-IN ATTEMPT!'
      ignoreregex: ''

  - name: sshd-unknown-user
    author: bodsch
    description: |
      The regex should math against

      # Invalid user <USER> from <HOST> port 54520
      # Connection closed by invalid user <USER> <HOST> port 54520 [preauth]
    includes:
      before: common.conf
    definition:
      daemon: sshd
    definition:
      failregex:
        - '^[iI]nvalid user <F-USER>.*?</F-USER> (?:from )?<HOST>'
        - '^Connection closed by invalid user <F-USER>.*?</F-USER>?<HOST>'
      ignoreregex: ''

  - name: sshd-ddos
    author: bodsch
    description: |
      The regex here also relates to a exploit:

      http://www.securityfocus.com/bid/17958/exploit
      The example code here shows the pushing of the exploit straight after
      reading the server version. This is where the client version string normally
      pushed. As such the server will read this unparsible information as
      "Did not receive identification string".
    includes:
      before: common.conf
    definition:
      daemon: sshd
      failregex:
        - '^%(__prefix_line)sDid not receive identification string from <HOST>\s*$'
      ignoreregex: ''

  - name: nginx-botsearch
    author: Frantisek Sumsal
    description: |
      Fail2Ban filter to match web requests for selected URLs that don't exist

      DEV Notes:
      Based on apache-botsearch filter
    includes:
      before: botsearch-common.conf
    definition:
      failregex:
        - '^<HOST> \- \S+ \[\] \"(GET|POST|HEAD) \/<block> \S+\" 404 .+$'
        - '^ \[error\] \d+#\d+: \*\d+ (\S+ )?\"\S+\" (failed|is not found) \(2\: No such file or directory\), client\: <HOST>\, server\: \S*\, request: \"(GET|POST|HEAD) \/<block> \S+\"\, .*?$'
      ignoreregex: ''
      datepattern:
        - '{^LN-BEG}%%ExY(?P<_sep>[-/.])%%m(?P=_sep)%%d[T ]%%H:%%M:%%S(?:[.,]%%f)?(?:\s*%%z)?'
        - '^[^\[]*\[({DATE})'
        - '{^LN-BEG}'


...
