#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# (c) 2020-2023, Bodo Schulz <bodo@boone-schulz.de>
# Apache-2.0 (see LICENSE or https://opensource.org/license/apache-2-0)
# SPDX-License-Identifier: Apache-2.0

from __future__ import absolute_import, division, print_function
import os
import json

from ansible.module_utils.basic import AnsibleModule
from ansible_collections.bodsch.core.plugins.module_utils.directory import create_directory
from ansible_collections.bodsch.core.plugins.module_utils.file import (chmod, remove_file)
from ansible_collections.bodsch.core.plugins.module_utils.checksum import Checksum
# from ansible_collections.bodsch.core.plugins.module_utils.template.template import write_template

DOCUMENTATION = """
module: facts
version_added: 1.0.10
author:
  - Bodo 'bodsch' Schulz <bodo@boone-schulz.de>
short_description: Write Ansible Facts

description:
    - Write Ansible Facts

options:
  state:
    description:
      - Whether to create (C(present)), or remove (C(absent)) a fact.
    required: false
  name:
    description:
      - The name of the fact.
    type: str
    required: true
  facts:
    description:
      - A dictionary with information to be written in the facts.
    type: dict
    required: true
"""

EXAMPLES = """
- name: create custom facts
  bodsch.core.facts:
    state: present
    name: icinga2
    facts:
      version: "2.10"
      salt: fgmklsdfnjyxnvjksdfbkuser
      user: icinga2
"""

RETURN = """
msg:
  description: Module information
  type: str
"""

TPL_FACT = """#!/usr/bin/env bash
# generated by ansible
cat <<EOF
{{ item | tojson(indent=2) }}
EOF

"""


class AnsibleFacts(object):
    """
      Main Class
    """
    module = None

    def __init__(self, module):
        """
          Initialize all needed Variables
        """
        self.module = module

        self.verbose = module.params.get("verbose")
        self.state = module.params.get("state")
        self.name = module.params.get("name")
        self.facts = module.params.get("facts")

        self.cache_directory = f"/var/cache/ansible/{self.name}"
        self.cache_file_name = os.path.join(self.cache_directory, "facts.checksum")
        self.facts_file = os.path.join("/etc/ansible/facts.d", f"{self.name}.fact")

    def run(self):
        """
          runner
        """
        create_directory(self.cache_directory)

        _failed = False
        _changed = False
        _msg = "There are no changes."

        checksum = None

        if self.state == "absent":
            for f in [self.cache_file_name, self.facts_file]:
                if os.path.exists(f):
                    remove_file(f)
                    _changed = True
                    _msg = "The facts have been successfully removed."

            return dict(
                changed=_changed,
                msg=_msg
            )

        checksum = Checksum(self.module)

        if not os.path.exists(self.facts_file) and os.path.exists(self.cache_file_name):
            os.remove(self.cache_file_name)

        # self.module.log(f" facts  : {self.facts}")

        changed, new_checksum, old_checksum = checksum.validate(self.cache_file_name, self.facts)

        # self.module.log(f" changed       : {changed}")
        # self.module.log(f" new_checksum  : {new_checksum}")
        # self.module.log(f" old_checksum  : {old_checksum}")

        if not changed:
            return dict(
                changed=False,
            )

        # Serializing json
        json_object = json.dumps(self.facts, indent=2)

        # Writing to sample.json
        with open(self.facts_file, "w") as outfile:
            outfile.write("#!/usr/bin/env bash\n# generated by ansible\ncat <<EOF\n")

        with open(self.facts_file, "a+") as outfile:
            outfile.write(json_object + "\nEOF\n")

        # write_template(self.facts_file, TPL_FACT, self.facts)
        chmod(self.facts_file, "0775")

        checksum.write_checksum(self.cache_file_name, new_checksum)

        return dict(
            failed=_failed,
            changed=True,
            msg="The facts have been successfully written."
        )


def main():

    args = dict(
        state=dict(
            choices=[
                "present",
                "absent",
            ],
            default="present"
        ),
        name=dict(
            type="str",
            required=True,
        ),
        facts=dict(
            type="dict",
            required=True,
        )
    )

    module = AnsibleModule(
        argument_spec=args,
        supports_check_mode=True,
    )

    obj = AnsibleFacts(module)
    result = obj.run()

    module.log(msg=f"= result: {result}")

    module.exit_json(**result)


# import module snippets
if __name__ == '__main__':
    main()
